[
  {
    "objectID": "HW9.html",
    "href": "HW9.html",
    "title": "",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.6     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tune         1.2.1\n✔ infer        1.0.7     ✔ workflows    1.1.4\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.2.1     ✔ yardstick    1.3.1\n✔ recipes      1.1.0     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Dig deeper into tidy modeling with R at https://www.tmwr.org\n\nbike_data &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/SeoulBikeData.csv\",\n                      local = locale(encoding = \"latin1\"))\n\nRows: 8760 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Date, Seasons, Holiday, Functioning Day\ndbl (10): Rented Bike Count, Hour, Temperature(°C), Humidity(%), Wind speed ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nbike_data\n\n# A tibble: 8,760 × 14\n   Date       `Rented Bike Count`  Hour `Temperature(°C)` `Humidity(%)`\n   &lt;chr&gt;                    &lt;dbl&gt; &lt;dbl&gt;             &lt;dbl&gt;         &lt;dbl&gt;\n 1 01/12/2017                 254     0              -5.2            37\n 2 01/12/2017                 204     1              -5.5            38\n 3 01/12/2017                 173     2              -6              39\n 4 01/12/2017                 107     3              -6.2            40\n 5 01/12/2017                  78     4              -6              36\n 6 01/12/2017                 100     5              -6.4            37\n 7 01/12/2017                 181     6              -6.6            35\n 8 01/12/2017                 460     7              -7.4            38\n 9 01/12/2017                 930     8              -7.6            37\n10 01/12/2017                 490     9              -6.5            27\n# ℹ 8,750 more rows\n# ℹ 9 more variables: `Wind speed (m/s)` &lt;dbl&gt;, `Visibility (10m)` &lt;dbl&gt;,\n#   `Dew point temperature(°C)` &lt;dbl&gt;, `Solar Radiation (MJ/m2)` &lt;dbl&gt;,\n#   `Rainfall(mm)` &lt;dbl&gt;, `Snowfall (cm)` &lt;dbl&gt;, Seasons &lt;chr&gt;, Holiday &lt;chr&gt;,\n#   `Functioning Day` &lt;chr&gt;\n\n\n\nbike_data |&gt; \n  is.na() |&gt; \n  colSums()\n\n                     Date         Rented Bike Count                      Hour \n                        0                         0                         0 \n          Temperature(°C)               Humidity(%)          Wind speed (m/s) \n                        0                         0                         0 \n         Visibility (10m) Dew point temperature(°C)   Solar Radiation (MJ/m2) \n                        0                         0                         0 \n             Rainfall(mm)             Snowfall (cm)                   Seasons \n                        0                         0                         0 \n                  Holiday           Functioning Day \n                        0                         0 \n\n\n\nattributes(bike_data)$spec\n\ncols(\n  Date = col_character(),\n  `Rented Bike Count` = col_double(),\n  Hour = col_double(),\n  `Temperature(°C)` = col_double(),\n  `Humidity(%)` = col_double(),\n  `Wind speed (m/s)` = col_double(),\n  `Visibility (10m)` = col_double(),\n  `Dew point temperature(°C)` = col_double(),\n  `Solar Radiation (MJ/m2)` = col_double(),\n  `Rainfall(mm)` = col_double(),\n  `Snowfall (cm)` = col_double(),\n  Seasons = col_character(),\n  Holiday = col_character(),\n  `Functioning Day` = col_character()\n)\n\n\n\nbike_data &lt;- bike_data |&gt;\nmutate(date = lubridate::dmy(Date)) |&gt; select(-Date)\n\n\nsummary(bike_data)\n\n Rented Bike Count      Hour       Temperature(°C)   Humidity(%)   \n Min.   :   0.0    Min.   : 0.00   Min.   :-17.80   Min.   : 0.00  \n 1st Qu.: 191.0    1st Qu.: 5.75   1st Qu.:  3.50   1st Qu.:42.00  \n Median : 504.5    Median :11.50   Median : 13.70   Median :57.00  \n Mean   : 704.6    Mean   :11.50   Mean   : 12.88   Mean   :58.23  \n 3rd Qu.:1065.2    3rd Qu.:17.25   3rd Qu.: 22.50   3rd Qu.:74.00  \n Max.   :3556.0    Max.   :23.00   Max.   : 39.40   Max.   :98.00  \n Wind speed (m/s) Visibility (10m) Dew point temperature(°C)\n Min.   :0.000    Min.   :  27     Min.   :-30.600          \n 1st Qu.:0.900    1st Qu.: 940     1st Qu.: -4.700          \n Median :1.500    Median :1698     Median :  5.100          \n Mean   :1.725    Mean   :1437     Mean   :  4.074          \n 3rd Qu.:2.300    3rd Qu.:2000     3rd Qu.: 14.800          \n Max.   :7.400    Max.   :2000     Max.   : 27.200          \n Solar Radiation (MJ/m2)  Rainfall(mm)     Snowfall (cm)       Seasons         \n Min.   :0.0000          Min.   : 0.0000   Min.   :0.00000   Length:8760       \n 1st Qu.:0.0000          1st Qu.: 0.0000   1st Qu.:0.00000   Class :character  \n Median :0.0100          Median : 0.0000   Median :0.00000   Mode  :character  \n Mean   :0.5691          Mean   : 0.1487   Mean   :0.07507                     \n 3rd Qu.:0.9300          3rd Qu.: 0.0000   3rd Qu.:0.00000                     \n Max.   :3.5200          Max.   :35.0000   Max.   :8.80000                     \n   Holiday          Functioning Day         date           \n Length:8760        Length:8760        Min.   :2017-12-01  \n Class :character   Class :character   1st Qu.:2018-03-02  \n Mode  :character   Mode  :character   Median :2018-06-01  \n                                       Mean   :2018-06-01  \n                                       3rd Qu.:2018-08-31  \n                                       Max.   :2018-11-30  \n\n\n\nbike_data$Seasons |&gt; \n  unique()\n\n[1] \"Winter\" \"Spring\" \"Summer\" \"Autumn\"\n\n\n\nbike_data$Holiday |&gt; \n  unique()\n\n[1] \"No Holiday\" \"Holiday\"   \n\n\n\nbike_data$`Functioning Day` |&gt; \n  unique()\n\n[1] \"Yes\" \"No\" \n\n\n\nbike_data &lt;- bike_data |&gt; \n  mutate(seasons = factor(Seasons),\n         holiday = factor(Holiday),\n         fn_day = factor(`Functioning Day`)) |&gt; \n  select(-Seasons, -Holiday, -`Functioning Day`)\n\n\nbike_data &lt;- bike_data |&gt; rename('bike_count' = `Rented Bike Count`,\n         'hour' = \"Hour\",\n         \"temp\" = `Temperature(°C)`,\n         \"wind_speed\" = `Wind speed (m/s)`,\n         \"humidity\" = `Humidity(%)`,\n         \"vis\" = `Visibility (10m)`,\n         \"dew_point_temp\" = `Dew point temperature(°C)`,\n         \"solar_radiation\" = `Solar Radiation (MJ/m2)`,\n         \"rainfall\" = \"Rainfall(mm)\",\n         \"snowfall\" = `Snowfall (cm)`)\n\n\nbike_data &lt;- bike_data |&gt; \n  filter(fn_day == \"Yes\") |&gt; \n  select(-fn_day)\n\n\nbike_data &lt;- bike_data |&gt;\n  group_by(date, seasons, holiday) |&gt; \n  summarize(bike_count = sum(bike_count),\n            temp = mean(temp),\n            humidity = mean(humidity), \n            wind_speed = mean(wind_speed), \n            vis = mean(vis),\n            dew_point_temp = mean(dew_point_temp), \n            solar_radiation = mean(solar_radiation), \n            rainfall = sum(rainfall),\n            snowfall = sum(snowfall)) |&gt;\n  ungroup()\n\n`summarise()` has grouped output by 'date', 'seasons'. You can override using\nthe `.groups` argument.\n\nbike_data\n\n# A tibble: 353 × 12\n   date       seasons holiday    bike_count    temp humidity wind_speed   vis\n   &lt;date&gt;     &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n 1 2017-12-01 Winter  No Holiday       9539 -2.45       45.9      1.54  1871.\n 2 2017-12-02 Winter  No Holiday       8523  1.33       62.0      1.71  1471.\n 3 2017-12-03 Winter  No Holiday       7222  4.88       81.5      1.61   456.\n 4 2017-12-04 Winter  No Holiday       8729 -0.304      52.5      3.45  1363.\n 5 2017-12-05 Winter  No Holiday       8307 -4.46       36.4      1.11  1959.\n 6 2017-12-06 Winter  No Holiday       6669  0.0458     70.8      0.696 1187.\n 7 2017-12-07 Winter  No Holiday       8549  1.09       67.5      1.69   949.\n 8 2017-12-08 Winter  No Holiday       8032 -3.82       41.8      1.85  1872.\n 9 2017-12-09 Winter  No Holiday       7233 -0.846      46        1.08  1861.\n10 2017-12-10 Winter  No Holiday       3453  1.19       69.7      2.00  1043.\n# ℹ 343 more rows\n# ℹ 4 more variables: dew_point_temp &lt;dbl&gt;, solar_radiation &lt;dbl&gt;,\n#   rainfall &lt;dbl&gt;, snowfall &lt;dbl&gt;\n\n\n\nbike_data |&gt; \n  summarize(across(`bike_count`,\n                    .fns = c(\"mean\" = mean, \n                             \"median\" = median,\n                             \"sd\" = sd,\n                             \"IQR\" = IQR,\n                             \"min\" = min,\n                             \"max\" = max),\n                   .names = \"{.col}_{.fn}\"))\n\n# A tibble: 1 × 6\n  bike_count_mean bike_count_median bike_count_sd bike_count_IQR bike_count_min\n            &lt;dbl&gt;             &lt;dbl&gt;         &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n1          17485.             18563         9937.          19318            977\n# ℹ 1 more variable: bike_count_max &lt;dbl&gt;\n\n\n\nbike_data |&gt;\n  group_by(holiday) |&gt; \n  summarize(across(`bike_count`,\n                    .fns = c(\"mean\" = mean, \n                             \"median\" = median,\n                             \"sd\" = sd,\n                             \"IQR\" = IQR,\n                             \"min\" = min,\n                             \"max\" = max),\n                   .names = \"{.col}_{.fn}\"))\n\n# A tibble: 2 × 7\n  holiday    bike_count_mean bike_count_median bike_count_sd bike_count_IQR\n  &lt;fct&gt;                &lt;dbl&gt;             &lt;dbl&gt;         &lt;dbl&gt;          &lt;dbl&gt;\n1 Holiday             12700.             7184         10504.         16576 \n2 No Holiday          17727.            19104.         9862.         19168.\n# ℹ 2 more variables: bike_count_min &lt;dbl&gt;, bike_count_max &lt;dbl&gt;\n\n\n\nbike_data |&gt;\n  group_by(seasons) |&gt; \n  summarize(across(`bike_count`,\n                    .fns = c(\"mean\" = mean, \n                             \"median\" = median,\n                             \"sd\" = sd,\n                             \"IQR\" = IQR,\n                             \"min\" = min,\n                             \"max\" = max),\n                   .names = \"{.col}_{.fn}\"))\n\n# A tibble: 4 × 7\n  seasons bike_count_mean bike_count_median bike_count_sd bike_count_IQR\n  &lt;fct&gt;             &lt;dbl&gt;             &lt;dbl&gt;         &lt;dbl&gt;          &lt;dbl&gt;\n1 Autumn           22099.            23350          6711.         10733 \n2 Spring           17910.            17590          8357.         14362.\n3 Summer           24818.            25572.         7297.          9308.\n4 Winter            5413.             5498          1808.          2634.\n# ℹ 2 more variables: bike_count_min &lt;dbl&gt;, bike_count_max &lt;dbl&gt;\n\n\n\nbike_data |&gt;\n  group_by(seasons, holiday) |&gt; \n  summarize(across(`bike_count`,\n                    .fns = c(\"mean\" = mean, \n                             \"median\" = median,\n                             \"sd\" = sd,\n                             \"IQR\" = IQR,\n                             \"min\" = min,\n                             \"max\" = max),\n                   .names = \"{.col}_{.fn}\"))\n\n`summarise()` has grouped output by 'seasons'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 8 × 8\n# Groups:   seasons [4]\n  seasons holiday bike_count_mean bike_count_median bike_count_sd bike_count_IQR\n  &lt;fct&gt;   &lt;fct&gt;             &lt;dbl&gt;             &lt;dbl&gt;         &lt;dbl&gt;          &lt;dbl&gt;\n1 Autumn  Holiday          22754.            21705          5642.          5740 \n2 Autumn  No Hol…          22065.            23472          6792.         10734 \n3 Spring  Holiday          15247.            13790         10917.         10844 \n4 Spring  No Hol…          18002.            17730          8322.         14224.\n5 Summer  Holiday          24532.            24532.         8438.          5966.\n6 Summer  No Hol…          24824.            25572.         7324.          9165 \n7 Winter  Holiday           3759              3454.         1561.          1060.\n8 Winter  No Hol…           5574.             5609          1757.          2564 \n# ℹ 2 more variables: bike_count_min &lt;dbl&gt;, bike_count_max &lt;dbl&gt;\n\n\n\nbike_data |&gt; \n  select(where(is.numeric)) |&gt; \n  cor() |&gt;\n  round(3)\n\n                bike_count   temp humidity wind_speed    vis dew_point_temp\nbike_count           1.000  0.753    0.036     -0.193  0.166          0.650\ntemp                 0.753  1.000    0.404     -0.261  0.002          0.963\nhumidity             0.036  0.404    1.000     -0.234 -0.559          0.632\nwind_speed          -0.193 -0.261   -0.234      1.000  0.206         -0.288\nvis                  0.166  0.002   -0.559      0.206  1.000         -0.154\ndew_point_temp       0.650  0.963    0.632     -0.288 -0.154          1.000\nsolar_radiation      0.736  0.550   -0.274      0.096  0.271          0.383\nrainfall            -0.239  0.145    0.529     -0.102 -0.222          0.265\nsnowfall            -0.265 -0.267    0.065      0.021 -0.102         -0.210\n                solar_radiation rainfall snowfall\nbike_count                0.736   -0.239   -0.265\ntemp                      0.550    0.145   -0.267\nhumidity                 -0.274    0.529    0.065\nwind_speed                0.096   -0.102    0.021\nvis                       0.271   -0.222   -0.102\ndew_point_temp            0.383    0.265   -0.210\nsolar_radiation           1.000   -0.323   -0.233\nrainfall                 -0.323    1.000   -0.023\nsnowfall                 -0.233   -0.023    1.000\n\n\n\nggplot(bike_data, aes(x = temp, y = bike_count)) + \n  geom_jitter(aes(color = seasons)) + \n  facet_grid(~holiday)\n\n\n\n\n\n\n\n\n\nggplot(bike_data, aes(x = solar_radiation, y = bike_count)) + \n  geom_point(aes(color = seasons)) +\n  facet_grid(~holiday)\n\n\n\n\n\n\n\n\n\nset.seed(11)\nbike_split &lt;- initial_split(bike_data, prop = 0.75, strata = seasons) \nbike_train &lt;- training(bike_split)\nbike_test &lt;- testing(bike_split)\nbike_10_fold &lt;- vfold_cv(bike_train, 10)\n\n\nMLR_rec1 &lt;- recipe(bike_count ~ ., data = bike_train) |&gt;\nstep_date(date, features = \"dow\") |&gt;\nstep_mutate(day_type = factor(if_else(date_dow %in% c(\"Sat\", \"Sun\"), \"Weekend\", \"Weekday\"))) |&gt; step_rm(date, date_dow) |&gt;\nstep_dummy(seasons, holiday, day_type) |&gt;\nstep_normalize(all_numeric(), -bike_count)\n\n\nMLR_rec2 &lt;- MLR_rec1 |&gt;\nstep_interact(terms = ~starts_with(\"seasons\")*starts_with(\"holiday\") +\n                starts_with(\"seasons\")*temp + \n                temp*rainfall)\n\n\nMLR_rec3 &lt;- MLR_rec2 |&gt; \n  step_poly(temp,\n            wind_speed,\n            vis,\n            dew_point_temp,\n            solar_radiation,\n            rainfall,\n            snowfall,\n            degree = 2)\n\n\nMLR_spec &lt;- linear_reg() |&gt; \n  set_engine(\"lm\")\n\n\nMLR_CV_fit1 &lt;- workflow() |&gt; \n  add_recipe(MLR_rec1) |&gt; \n  add_model(MLR_spec) |&gt; \n  fit_resamples(bike_10_fold)\nMLR_CV_fit2 &lt;- workflow() |&gt; \n  add_recipe(MLR_rec2) |&gt;\n  add_model(MLR_spec) |&gt;\n  fit_resamples(bike_10_fold) \nMLR_CV_fit3 &lt;- workflow() |&gt;\nadd_recipe(MLR_rec3) |&gt; \n  add_model(MLR_spec) |&gt; \n  fit_resamples(bike_10_fold)\n\n\nrbind(MLR_CV_fit1 |&gt; collect_metrics(), \n      MLR_CV_fit2 |&gt; collect_metrics(), \n      MLR_CV_fit3 |&gt; collect_metrics())\n\n# A tibble: 6 × 6\n  .metric .estimator     mean     n  std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   4284.       10 165.     Preprocessor1_Model1\n2 rsq     standard      0.822    10   0.0151 Preprocessor1_Model1\n3 rmse    standard   3156.       10 267.     Preprocessor1_Model1\n4 rsq     standard      0.898    10   0.0176 Preprocessor1_Model1\n5 rmse    standard   3070.       10 213.     Preprocessor1_Model1\n6 rsq     standard      0.903    10   0.0142 Preprocessor1_Model1\n\n\n\nfinal_fit &lt;- workflow() |&gt; \n  add_recipe(MLR_rec1) |&gt; \n  add_model(MLR_spec) |&gt; \n  last_fit(bike_split)\nfinal_fit |&gt; \n  collect_metrics()\n\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard    3980.    Preprocessor1_Model1\n2 rsq     standard       0.846 Preprocessor1_Model1\n\n\n\nfinal_fit |&gt; \n  extract_fit_parsnip() |&gt; \n  tidy()\n\n# A tibble: 14 × 5\n   term               estimate std.error statistic   p.value\n   &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1 (Intercept)         17446.       252.    69.3   9.38e-165\n 2 temp                -2439.      5215.    -0.468 6.40e-  1\n 3 humidity            -1927.      1904.    -1.01  3.13e-  1\n 4 wind_speed           -523.       286.    -1.83  6.86e-  2\n 5 vis                   -63.7      361.    -0.177 8.60e-  1\n 6 dew_point_temp       7143.      6143.     1.16  2.46e-  1\n 7 solar_radiation      4088.       473.     8.64  6.74e- 16\n 8 rainfall            -1779.       333.    -5.35  2.00e-  7\n 9 snowfall             -317.       276.    -1.15  2.50e-  1\n10 seasons_Spring      -2528.       355.    -7.12  1.14e- 11\n11 seasons_Summer      -1670.       442.    -3.78  1.98e-  4\n12 seasons_Winter      -3684.       501.    -7.35  2.88e- 12\n13 holiday_No.Holiday    835.       256.     3.26  1.28e-  3\n14 day_type_Weekend    -1050.       256.    -4.10  5.56e-  5\n\n\n\nlibrary(tidymodels)\nlibrary(caret)\n\nLoading required package: lattice\n\n\n\nAttaching package: 'caret'\n\n\nThe following objects are masked from 'package:yardstick':\n\n    precision, recall, sensitivity, specificity\n\n\nThe following object is masked from 'package:purrr':\n\n    lift\n\nlibrary(glmnet)\n\nLoading required package: Matrix\n\n\n\nAttaching package: 'Matrix'\n\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n\n\nLoaded glmnet 4.1-8\n\nlibrary(rpart)\n\n\nAttaching package: 'rpart'\n\n\nThe following object is masked from 'package:dials':\n\n    prune\n\nlibrary(randomForest)\n\nrandomForest 4.7-1.2\n\n\nType rfNews() to see new features/changes/bug fixes.\n\n\n\nAttaching package: 'randomForest'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\n\nThe following object is masked from 'package:ggplot2':\n\n    margin\n\nlibrary(ipred)\nlibrary(ggplot2)\nlibrary(recipes)\n\nLasso\n\nlasso_spec &lt;- linear_reg(penalty = tune()) |&gt;\n  set_engine(\"glmnet\") |&gt;\n  set_mode(\"regression\")\n\nlasso_grid &lt;- grid_regular(penalty(), levels = 20)\n\nlasso_wf &lt;- workflow() |&gt;\n  add_recipe(MLR_rec1) |&gt;\n  add_model(lasso_spec)\n\nlasso_tune &lt;- lasso_wf |&gt;\n  tune_grid(resamples = bike_10_fold, grid = lasso_grid)\n\nRegression Tree\n\ntree_spec &lt;- decision_tree(cost_complexity = tune(), tree_depth = tune()) |&gt;\n  set_engine(\"rpart\") |&gt;\n  set_mode(\"regression\")\n\ntree_grid &lt;- grid_regular(cost_complexity(), tree_depth(), levels = 5)\n\ntree_wf &lt;- workflow() |&gt;\n  add_recipe(MLR_rec1) |&gt;\n  add_model(tree_spec)\n\ntree_tune &lt;- tree_wf |&gt;\n  tune_grid(resamples = bike_10_fold, grid = tree_grid)\n\nBagged Tree\n\nbag_tree_spec &lt;- rand_forest(trees = tune(), min_n = tune()) %&gt;%\n  set_engine(\"randomForest\") %&gt;%\n  set_mode(\"regression\")\n\nbag_tree_grid &lt;- grid_regular(trees(range = c(50, 500)), min_n(range = c(2, 50)), levels = 5)\n\nbag_tree_workflow &lt;- workflow() %&gt;%\n  add_recipe(MLR_rec1) %&gt;%\n  add_model(bag_tree_spec)\n\nbag_tree_tune &lt;- bag_tree_workflow %&gt;%\n  tune_grid(resamples = bike_10_fold, grid = bag_tree_grid)\n\nRandom Forest\n\nrf_spec &lt;- rand_forest(mtry = tune(), trees = tune()) |&gt;\n  set_engine(\"randomForest\") |&gt;\n  set_mode(\"regression\")\n\nrf_grid &lt;- grid_regular(\n  mtry(range =  c(2,10)),\n  trees(range = c(100, 200)), \n  levels = 5\n)\n\nrf_wf &lt;- workflow() |&gt;\n  add_recipe(MLR_rec1) |&gt;\n  add_model(rf_spec)\n\nrf_tune &lt;- rf_wf |&gt;\n  tune_grid(resamples = bike_10_fold, grid = rf_grid)\n\n\nlasso_metrics &lt;- collect_metrics(lasso_tune)\ntree_metrics &lt;- collect_metrics(tree_tune)\nbag_tree_metrics &lt;- collect_metrics(bag_tree_tune)\nrf_metrics &lt;- collect_metrics(rf_tune)\n\nlasso_metrics\n\n# A tibble: 40 × 7\n    penalty .metric .estimator     mean     n  std_err .config              \n      &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;                \n 1 1   e-10 rmse    standard   4272.       10 168.     Preprocessor1_Model01\n 2 1   e-10 rsq     standard      0.823    10   0.0152 Preprocessor1_Model01\n 3 3.36e-10 rmse    standard   4272.       10 168.     Preprocessor1_Model02\n 4 3.36e-10 rsq     standard      0.823    10   0.0152 Preprocessor1_Model02\n 5 1.13e- 9 rmse    standard   4272.       10 168.     Preprocessor1_Model03\n 6 1.13e- 9 rsq     standard      0.823    10   0.0152 Preprocessor1_Model03\n 7 3.79e- 9 rmse    standard   4272.       10 168.     Preprocessor1_Model04\n 8 3.79e- 9 rsq     standard      0.823    10   0.0152 Preprocessor1_Model04\n 9 1.27e- 8 rmse    standard   4272.       10 168.     Preprocessor1_Model05\n10 1.27e- 8 rsq     standard      0.823    10   0.0152 Preprocessor1_Model05\n# ℹ 30 more rows\n\ntree_metrics\n\n# A tibble: 50 × 8\n   cost_complexity tree_depth .metric .estimator     mean     n  std_err .config\n             &lt;dbl&gt;      &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;  \n 1    0.0000000001          1 rmse    standard   6432.       10 350.     Prepro…\n 2    0.0000000001          1 rsq     standard      0.595    10   0.0484 Prepro…\n 3    0.0000000178          1 rmse    standard   6432.       10 350.     Prepro…\n 4    0.0000000178          1 rsq     standard      0.595    10   0.0484 Prepro…\n 5    0.00000316            1 rmse    standard   6432.       10 350.     Prepro…\n 6    0.00000316            1 rsq     standard      0.595    10   0.0484 Prepro…\n 7    0.000562              1 rmse    standard   6432.       10 350.     Prepro…\n 8    0.000562              1 rsq     standard      0.595    10   0.0484 Prepro…\n 9    0.1                   1 rmse    standard   6432.       10 350.     Prepro…\n10    0.1                   1 rsq     standard      0.595    10   0.0484 Prepro…\n# ℹ 40 more rows\n\nbag_tree_metrics\n\n# A tibble: 50 × 8\n   trees min_n .metric .estimator     mean     n  std_err .config              \n   &lt;int&gt; &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;                \n 1    50     2 rmse    standard   3202.       10 206.     Preprocessor1_Model01\n 2    50     2 rsq     standard      0.901    10   0.0148 Preprocessor1_Model01\n 3   162     2 rmse    standard   3103.       10 192.     Preprocessor1_Model02\n 4   162     2 rsq     standard      0.908    10   0.0140 Preprocessor1_Model02\n 5   275     2 rmse    standard   3127.       10 206.     Preprocessor1_Model03\n 6   275     2 rsq     standard      0.906    10   0.0145 Preprocessor1_Model03\n 7   387     2 rmse    standard   3127.       10 187.     Preprocessor1_Model04\n 8   387     2 rsq     standard      0.907    10   0.0136 Preprocessor1_Model04\n 9   500     2 rmse    standard   3110.       10 193.     Preprocessor1_Model05\n10   500     2 rsq     standard      0.907    10   0.0139 Preprocessor1_Model05\n# ℹ 40 more rows\n\nrf_metrics\n\n# A tibble: 50 × 8\n    mtry trees .metric .estimator     mean     n  std_err .config              \n   &lt;int&gt; &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;                \n 1     2   100 rmse    standard   3511.       10 177.     Preprocessor1_Model01\n 2     2   100 rsq     standard      0.890    10   0.0144 Preprocessor1_Model01\n 3     4   100 rmse    standard   3195.       10 199.     Preprocessor1_Model02\n 4     4   100 rsq     standard      0.902    10   0.0151 Preprocessor1_Model02\n 5     6   100 rmse    standard   3103.       10 210.     Preprocessor1_Model03\n 6     6   100 rsq     standard      0.905    10   0.0149 Preprocessor1_Model03\n 7     8   100 rmse    standard   3062.       10 203.     Preprocessor1_Model04\n 8     8   100 rsq     standard      0.907    10   0.0142 Preprocessor1_Model04\n 9    10   100 rmse    standard   3071.       10 195.     Preprocessor1_Model05\n10    10   100 rsq     standard      0.907    10   0.0138 Preprocessor1_Model05\n# ℹ 40 more rows\n\nbest_lasso &lt;- lasso_metrics %&gt;%\n  filter(.metric == \"rmse\") %&gt;%\n  arrange(mean) %&gt;%\n  slice(1)\n\nbest_tree &lt;- tree_metrics %&gt;%\n  filter(.metric == \"rmse\") %&gt;%\n  arrange(mean) %&gt;%\n  slice(1)\n\nbest_bag_tree &lt;- bag_tree_metrics %&gt;%\n  filter(.metric == \"rmse\") %&gt;%\n  arrange(mean) %&gt;%\n  slice(1)\n\nbest_rf &lt;- rf_metrics %&gt;%\n  filter(.metric == \"rmse\") %&gt;%\n  arrange(mean) %&gt;%\n  slice(1)\n\n\nfinal_lasso &lt;- lasso_wf %&gt;%\n  finalize_workflow(best_lasso)\n\nfinal_tree &lt;- tree_wf %&gt;%\n  finalize_workflow(best_tree)\n\nfinal_bag_tree &lt;- bag_tree_workflow %&gt;%\n  finalize_workflow(best_bag_tree)\n\nfinal_rf &lt;- rf_wf %&gt;%\n  finalize_workflow(best_rf)\n\nfinal_lasso_fit &lt;- final_lasso %&gt;%\n  fit(bike_train)\n\nfinal_tree_fit &lt;- final_tree %&gt;%\n  fit(bike_train)\n\nfinal_bag_tree_fit &lt;- final_bag_tree %&gt;%\n  fit(bike_train)\n\nfinal_rf_fit &lt;- final_rf %&gt;%\n  fit(bike_train)\n\n\nlasso_pred &lt;- predict(final_lasso_fit, bike_test) %&gt;%\n  bind_cols(bike_test) %&gt;%\n  metrics(truth = bike_count, estimate = .pred)\n\ntree_pred &lt;- predict(final_tree_fit, bike_test) %&gt;%\n  bind_cols(bike_test) %&gt;%\n  metrics(truth = bike_count, estimate = .pred)\n\nbag_tree_pred &lt;- predict(final_bag_tree_fit, bike_test) %&gt;%\n  bind_cols(bike_test) %&gt;%\n  metrics(truth = bike_count, estimate = .pred)\n\nrf_pred &lt;- predict(final_rf_fit, bike_test) %&gt;%\n  bind_cols(bike_test) %&gt;%\n  metrics(truth = bike_count, estimate = .pred)\n\n\nlasso_metrics &lt;- lasso_pred %&gt;%\n  filter(.metric %in% c(\"rmse\", \"mae\"))\n\ntree_metrics &lt;- tree_pred %&gt;%\n  filter(.metric %in% c(\"rmse\", \"mae\"))\n\nbag_tree_metrics &lt;- bag_tree_pred %&gt;%\n  filter(.metric %in% c(\"rmse\", \"mae\"))\n\nrf_metrics &lt;- rf_pred %&gt;%\n  filter(.metric %in% c(\"rmse\", \"mae\"))\n\nlist(\n  lasso = lasso_metrics,\n  tree = tree_metrics,\n  bag_tree = bag_tree_metrics,\n  rf = rf_metrics\n)\n\n$lasso\n# A tibble: 2 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard       3999.\n2 mae     standard       3063.\n\n$tree\n# A tibble: 2 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard       3080.\n2 mae     standard       2367.\n\n$bag_tree\n# A tibble: 2 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard       3073.\n2 mae     standard       2445.\n\n$rf\n# A tibble: 2 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard       2711.\n2 mae     standard       2131.\n\n\n\nlasso_coefs &lt;- final_lasso_fit %&gt;%\n  extract_fit_parsnip() %&gt;%\n  tidy()\n\nlasso_coefs\n\n# A tibble: 14 × 3\n   term               estimate      penalty\n   &lt;chr&gt;                 &lt;dbl&gt;        &lt;dbl&gt;\n 1 (Intercept)          17446. 0.0000000001\n 2 temp                   389. 0.0000000001\n 3 humidity              -887. 0.0000000001\n 4 wind_speed            -522. 0.0000000001\n 5 vis                      0  0.0000000001\n 6 dew_point_temp        3752. 0.0000000001\n 7 solar_radiation       4065. 0.0000000001\n 8 rainfall             -1841. 0.0000000001\n 9 snowfall              -336. 0.0000000001\n10 seasons_Spring       -2505. 0.0000000001\n11 seasons_Summer       -1607. 0.0000000001\n12 seasons_Winter       -3653. 0.0000000001\n13 holiday_No.Holiday     820. 0.0000000001\n14 day_type_Weekend     -1060. 0.0000000001\n\nmlr_coefs &lt;- final_fit %&gt;%\n  extract_fit_parsnip() %&gt;%\n  tidy()\n\nmlr_coefs\n\n# A tibble: 14 × 5\n   term               estimate std.error statistic   p.value\n   &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1 (Intercept)         17446.       252.    69.3   9.38e-165\n 2 temp                -2439.      5215.    -0.468 6.40e-  1\n 3 humidity            -1927.      1904.    -1.01  3.13e-  1\n 4 wind_speed           -523.       286.    -1.83  6.86e-  2\n 5 vis                   -63.7      361.    -0.177 8.60e-  1\n 6 dew_point_temp       7143.      6143.     1.16  2.46e-  1\n 7 solar_radiation      4088.       473.     8.64  6.74e- 16\n 8 rainfall            -1779.       333.    -5.35  2.00e-  7\n 9 snowfall             -317.       276.    -1.15  2.50e-  1\n10 seasons_Spring      -2528.       355.    -7.12  1.14e- 11\n11 seasons_Summer      -1670.       442.    -3.78  1.98e-  4\n12 seasons_Winter      -3684.       501.    -7.35  2.88e- 12\n13 holiday_No.Holiday    835.       256.     3.26  1.28e-  3\n14 day_type_Weekend    -1050.       256.    -4.10  5.56e-  5\n\n\n\ntree_model &lt;- final_tree_fit %&gt;%\n  extract_fit_parsnip()\n\nlibrary(rpart.plot)\nrpart.plot(tree_model$fit, type = 4, extra = 101, main = \"Final Regression Tree\")\n\nWarning: Cannot retrieve the data used to build the model (so cannot determine roundint and is.binary for the variables).\nTo silence this warning:\n    Call rpart.plot with roundint=FALSE,\n    or rebuild the rpart model with model=TRUE.\n\n\n\n\n\n\n\n\n\n\nbag_tree_model &lt;- final_bag_tree_fit %&gt;%\n  extract_fit_parsnip()\n\nlibrary(vip)\n\n\nAttaching package: 'vip'\n\n\nThe following object is masked from 'package:utils':\n\n    vi\n\nvip(bag_tree_model$fit)\n\n\n\n\n\n\n\n\n\nrf_model &lt;- final_rf_fit %&gt;%\n  extract_fit_parsnip()\n\nvip(rf_model$fit)"
  }
]